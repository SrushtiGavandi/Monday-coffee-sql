CREATE DATABASE MONDAY_COFFEE;

-- OBJECTIVE : THE BUISNESS AIMS TO EXPAND BY OPENING THREE CPOFFEE SHOPSIN INDIA'S TOP THREE MAJOR CITIES.
-- SINCE ITS LAUNCH IN JAN 2023 , THE COMPANY HAS SUCCESSFULLY SOLD ITS PRODUCT ONLINE AND REVCEIVED AN
-- OVERRWHELMING POSITIVE RESPONSE IN SEVERAL CITIES . AS A BUSINESS ANALYST , YOUR TASK IS TO ANALYZE 
-- SALES DATA AND PROVIDE INSIGHTS TO RECOMMEND THE TOP THREE CITIES FOR EXPANSION


-- 1 . HOW MANY PEOPLE IN EACH CITY ARE ESTIMATED TO CONSUME COFFEE , GIVEN THAT 25% OF POPULATION DOES ?

SELECT CITY_NAME , POPULATION , 
ROUND(POPULATION * 0.25) AS CONSUMER
FROM CITY ;


-- 2 . WHAT IS THE TOTAL REVENUE GENERATED FROM COFFEE SALES ACROSS ALL THE CITITES IN THE LAST QUARTER OF 2023?

SELECT SUM(SALES.TOTAL) AS TOTAL_REVENUE FROM SALES
WHERE SALE_DATE BETWEEN '2023-10-01' AND '2023-12-31' ;

-- OR TO GROUP BY CITY 

SELECT city.city_name,
SUM(sales.total) AS total_revenue
FROM sales
JOIN 
customers ON sales.customer_id = customers.customer_id
JOIN 
city ON customers.city_id = city.city_id
WHERE 
sale_date BETWEEN '2023-10-01' AND '2023-12-31'
GROUP BY 
city.city_name;


-- 3 . SALES COUNT FOR EACH PRODUCT . HOW MANY UNITS OF EACH COFFEE PRODUCT HAVE BEEN SOLD ?  

SELECT PRODUCTS.PRODUCT_ID , PRODUCTS.PRODUCT_NAME ,
COUNT(SALES.TOTAL) AS UNIT_SOLD
FROM SALES
JOIN PRODUCTS ON SALES.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_ID , PRODUCTS.PRODUCT_NAME ;
 
 
 -- 4 . AVERAGE SALES AMOUNT PER CITY . WHAT IS THE AVERAGE SALES AMOUNT PER CUSTOMER IN EACH CITY ?
 
 SELECT CITY.CITY_NAME AS CITY , AVG(SALES.TOTAL) AS AVG_SALES
 FROM SALES JOIN CUSTOMERS ON
 SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
 JOIN CITY ON
 CITY.CITY_ID = CUSTOMERS.CITY_ID
 GROUP BY CITY.CITY_NAME ;
 
 
  -- 5 . CITY POPULATION AND COFFEE CONSUMERS .
  -- PROVIDE A LIST OF CITIES ALONG WITH THEIR POPULATION AND ESTIMATED COFFEE CONSUMERS
  
  SELECT CITY.CITY_NAME , CITY.POPULATION , COUNT(CUSTOMERS.CUSTOMER_ID)  AS ESTIMATED_COFFEE_USER
  FROM CUSTOMERS 
  JOIN CITY ON CUSTOMERS.CITY_ID = CITY.CITY_ID
  GROUP BY CITY.CITY_NAME , CITY.POPULATION ;
  
  
  -- 6 . TOP SELLING PRODUCTS BY CITY . WHAT ARE THE TOP 3 SELLING PRODUCTS IN EACH CITY BASED ON SALES VOLUME ?
  
WITH PRODUCT_SALE AS (
SELECT CITY.CITY_NAME , PRODUCTS.PRODUCT_NAME , COUNT(SALES.SALE_ID) AS SALES
FROM SALES JOIN CUSTOMERS ON SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN CITY ON  CITY.CITY_ID = CUSTOMERS.CITY_ID
JOIN  PRODUCTS ON SALES.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY CITY.CITY_NAME , PRODUCTS.PRODUCT_NAME 
) ,
RANKED_SALE AS ( 
SELECT * ,  RANK() OVER (PARTITION BY CITY_NAME ORDER BY SALES DESC) AS RANK_IN_CITY
FROM PRODUCT_SALE)

SELECT CITY_NAME , PRODUCT_NAME , SALES FROM RANKED_SALE
WHERE RANK_IN_CITY <= 3;


-- 7 . CUSTOMER SEGMENTATION BY CITY . HOW MANY UNIQUE CUSTOMERS ARE THERE IN EACH CITY WHO HAVE PURCHASED COFFEE PRODUCTS ?

SELECT CITY.CITY_NAME , COUNT(DISTINCT CUSTOMERS.CUSTOMER_ID) AS UNIQUE_CUSTOMER
FROM SALES JOIN CUSTOMERS ON 
SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN CITY ON CITY.CITY_ID = CUSTOMERS.CITY_ID
JOIN PRODUCTS ON PRODUCTS.PRODUCT_ID = SALES.PRODUCT_ID
GROUP BY CITY.CITY_NAME ;


-- 8 . AVERAGE SALES VS RENT . FIND EACH CITY AND THEIR AVG SALE PER CUSTOMER AND AVG RENT PER CUSTOMER.

SELECT CITY.CITY_NAME , 
ROUND(SUM(SALES.TOTAL)/COUNT(DISTINCT CUSTOMERS.CUSTOMER_ID) ,2 ) AS AVG_SALE_PER_CUSTOMER ,
ROUND(SUM(CITY.ESTIMATED_RENT)/COUNT(DISTINCT CUSTOMERS.CUSTOMER_ID) ,2 ) AS AVG_RENT_PER_CUSTOMER
FROM SALES JOIN CUSTOMERS ON
SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN CITY ON 
CITY.CITY_ID = CUSTOMERS.CITY_ID
GROUP BY CITY.CITY_NAME ;


-- 9 . MONTHLY SALES GROWTH RATE . CALCULATE THE PERCENTAGE GROWTH (OR DECLINE) IN SALES OVER DIFFERENT TIME PERIODS 
-- (MONTHLY) BY EACH CITY 




-- 10 . MARKET POTENTIAL ANALYSIS . IDENTIFY TOP 3 CITY BASED ON HIGHEST SALES , RETURN CITY NAME , TOTAL SALE , 
-- TOTAL RENT , TOTAL CUSTOMER AND ESTIMATED COFFEE CONSUMER  (60%)

SELECT CITY.CITY_NAME ,
SUM(CITY.ESTIMATED_RENT) AS TOTAL_RENT ,
SUM(SALES.TOTAL) AS TOTAL_SALE ,
COUNT(DISTINCT CUSTOMERS.CUSTOMER_ID) AS TOTAL_CUSTOMER , 
ROUND(SUM(CITY.POPULATION) * 0.60 , 0) AS ESTIMATED_COFFEE_CONSUMER
FROM SALES JOIN CUSTOMERS ON
SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN CITY ON
CITY.CITY_ID = CUSTOMERS.CITY_ID
GROUP BY CITY.CITY_NAME
ORDER BY TOTAL_SALE DESC LIMIT 3 ;


-- 11 . CUSTOMER LOYALTY ANALYSIS  IDENTIFY THE TOP 5 MOST LOYAL CUSTOMERS BASED ON TOTAL NUMBER OF PURCHASES AND TOTAL SALES values

SELECT CUSTOMERS.CUSTOMER_NAME , CITY.CITY_NAME , 
SUM(SALES.TOTAL) AS TOTAL_SALES ,
COUNT(DISTINCT SALES.SALE_ID ) AS SALES_ORDER
FROM SALES JOIN CUSTOMERS ON
SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN CITY ON 
CITY.CITY_ID = CUSTOMERS.CITY_ID
GROUP BY CUSTOMERS.CUSTOMER_NAME , CITY.CITY_NAME  
ORDER BY SALES_ORDER DESC LIMIT 5 ;


-- 12 . PRODUCT PERFORMANCE REPORT . WHICH 3 PRODUCT HAVE THE GENERATED THE HIGHEST REVENUE ?
--  ALSO FIND THE AVG RATING .

SELECT 
PRODUCTS.PRODUCT_NAME ,
COUNT(SALES.SALE_ID) AS TOTAL_UNITS_SOLD,
SUM(SALES.TOTAL) AS TOTAL_REVENUE,
ROUND(AVG(SALES.RATING), 2) AS AVERAGE_RATING
FROM SALES
JOIN PRODUCTS ON SALES.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_NAME 
ORDER BY TOTAL_REVENUE DESC
LIMIT 3; 


-- 13 . SALES CONTRIBUTION BY CITY . WHAT PERCENATGE OF TOTAL SALES COMES FROM EACH CITY?

WITH CITY_SALES AS (
    SELECT CITY.CITY_NAME , SUM(SALES.TOTAL) AS SALES_PER_CITY
    FROM SALES JOIN CUSTOMERS ON
    SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
    JOIN CITY ON CITY.CITY_ID = CUSTOMERS.CITY_ID
    GROUP BY CITY.CITY_NAME ),
    
    TOTAL_SALES AS ( SELECT  
    SUM(SALES.TOTAL) AS GRAND_TOTAL
    FROM SALES )
    
    SELECT CITY_SALES.CITY_NAME ,
    CITY_SALES.SALES_PER_CITY ,
    TOTAL_SALES.GRAND_TOTAL ,
	ROUND(CITY_SALES.SALES_PER_CITY /TOTAL_SALES.GRAND_TOTAL * 100 ,2) AS SALES_PERC
    FROM 
    CITY_SALES ,
    TOTAL_SALES
    ORDER BY SALES_PERC DESC ;
        
	
-- 14 .  WHICH CITIES HAVE AN AVERAGE CUSTOMER RATING ABOVE 4.0 ?

SELECT CITY.CITY_NAME ,
ROUND(AVG(SALES.RATING) ,2) AS AVG_RATING ,
COUNT(SALES.RATING) AS TOTAL_RATING 
FROM SALES JOIN CUSTOMERS ON
SALES.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
JOIN CITY ON 
CITY.CITY_ID = CUSTOMERS.CITY_ID
GROUP BY CITY.CITY_NAME 
HAVING AVG_RATING > 4.0
ORDER BY AVG_RATING DESC ; 







